version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: calicanto_postgres
    environment:
      POSTGRES_DB: calicanto_db
      POSTGRES_USER: calicanto_user
      POSTGRES_PASSWORD: calicanto_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - calicanto_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U calicanto_user -d calicanto_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:6-jammy
    container_name: calicanto_mongodb
    environment:
      MONGO_INITDB_DATABASE: calicanto_documents
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin_pass
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - calicanto_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for cache and Celery broker)
  redis:
    image: redis:7-alpine
    container_name: calicanto_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - calicanto_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    container_name: calicanto_backend
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ../backend:/app
      - media_volume:/app/media
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    env_file:
      - ../backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - calicanto_network

  # Celery Worker
  celery:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    container_name: calicanto_celery
    command: celery -A core worker -l info
    volumes:
      - ../backend:/app
    env_file:
      - ../backend/.env
    depends_on:
      - backend
      - redis
    networks:
      - calicanto_network

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    container_name: calicanto_celery_beat
    command: celery -A core beat -l info
    volumes:
      - ../backend:/app
    env_file:
      - ../backend/.env
    depends_on:
      - backend
      - redis
    networks:
      - calicanto_network

  # Vue.js Frontend (development)
  frontend:
    image: node:18-alpine
    container_name: calicanto_frontend
    working_dir: /app
    command: >
      sh -c "
        npm install &&
        npm run dev -- --host 0.0.0.0
      "
    volumes:
      - ../frontend:/app
      - node_modules:/app/node_modules
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
    depends_on:
      - backend
    networks:
      - calicanto_network

  # Nginx (for production-like environment)
  # Uncomment to use nginx instead of Vite dev server
  # nginx:
  #   build:
  #     context: ..
  #     dockerfile: docker/Dockerfile.frontend
  #   container_name: calicanto_nginx
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - backend
  #   networks:
  #     - calicanto_network

networks:
  calicanto_network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  media_volume:
  static_volume:
  node_modules: