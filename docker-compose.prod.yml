version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: calicanto_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-calicanto_db}
      POSTGRES_USER: ${POSTGRES_USER:-calicanto_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - calicanto_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-calicanto_user} -d ${POSTGRES_DB:-calicanto_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for cache and Celery broker)
  redis:
    image: redis:7-alpine
    container_name: calicanto_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - calicanto_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: calicanto_backend
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn --bind 0.0.0.0:8000 --workers 3 core.wsgi:application
      "
    volumes:
      - media_volume:/app/media
      - static_volume:/app/staticfiles
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgres://${POSTGRES_USER:-calicanto_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-calicanto_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - calicanto_network
    restart: unless-stopped

  # Celery Worker
  celery:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: calicanto_celery
    command: celery -A core worker -l info
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgres://${POSTGRES_USER:-calicanto_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-calicanto_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      - backend
      - redis
    networks:
      - calicanto_network
    restart: unless-stopped

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: calicanto_celery_beat
    command: celery -A core beat -l info
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgres://${POSTGRES_USER:-calicanto_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-calicanto_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      - backend
      - redis
    networks:
      - calicanto_network
    restart: unless-stopped

  # Nginx with Vue.js Frontend
  nginx:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: calicanto_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/usr/share/nginx/html/static
      - media_volume:/usr/share/nginx/html/media
      - ./docker/nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - calicanto_network
    restart: unless-stopped

networks:
  calicanto_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  media_volume:
  static_volume: